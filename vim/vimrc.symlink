set nocompatible               " be iMproved
let mapleader=','
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle
set rtp+=/usr/local/go/misc/vim
call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  Plugin 'kien/ctrlp.vim'
  Plugin 'tpope/vim-rails'
  " Plugin 'altercation/vim-colors-solarized'
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'scrooloose/nerdtree'
  Plugin 'vim-scripts/ctags.vim'
  Plugin 'vim-scripts/tComment'
  Plugin 'cakebaker/scss-syntax.vim'
  Plugin 'tracehelms/vim-tomorrow-theme'
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'
  Plugin 'fatih/vim-go'
  Plugin 'elixir-lang/vim-elixir'
call vundle#end()
filetype plugin indent on
syntax on "Enables syntax highlighting


""""""""""""""""""""""
"""""" SETTINGS """"""
""""""""""""""""""""""
" Tabs
set tabstop=2 "Sets indents to 2 spaces
set shiftwidth=2 "Sets indents to 2 spaces
set shiftround
set expandtab "Uses spaces instead of tabs
set list listchars=tab:»·,trail:· " Display extra whitespace

" Other settings
set number "Shows lines numbers
set cursorline "Highlights current line under cursor
set ruler
set colorcolumn=110 "Sets a visible line marker at line 110 (highlights column 111, left side=110)
set laststatus=2 "Shows the status bar even if there is only one buffer open
set timeoutlen=1000
set ttimeoutlen=100
set backspace=2 "Allows backspacing over everything in insert mode
set lazyredraw "Makes scrolling lag not as bad
set ttyfast "Force terminal to assume a fast connection
set t_Co=256
set splitbelow
set splitright
set re=1 " Use old regex engine, ruby syntax regexes were lagging
set hlsearch


""""""""""""""""""""""
""" CUSTOMIZATIONS """
""""""""""""""""""""""
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
" Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Tab completion
" will insert tab at beginning of line, will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" This removes trailing whitespaces on save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Deletes all hidden buffers (ones not currently visible)
function DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Detect *.md files as Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Theme related parameters
colorscheme tomorrow-night-eighties

" Set trigger keys for UltiSnips
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


""""""""""""""""""""""
"""""" MAPPINGS """"""
""""""""""""""""""""""
" CtrlP
nnoremap <Bslash> :CtrlP<cr>
" nnoremap <Leader>p :CtrlP<cr>
" nnoremap <Leader>pp :CtrlPTag<cr>

" Buffers
nnoremap <Leader>b :CtrlPBuffer<cr>
nnoremap <Leader>db :call DeleteHiddenBuffers()<cr>

" Saving, etc
nnoremap <Leader>w :retab<bar>:w<cr> " changes tabs to spaces and save
nnoremap <Leader>wq :retab<bar>:wq<cr> " changes tabs to spaces, saves, and quits
nnoremap <Leader>q :q<cr>

" Commenting
nnoremap <Leader>c :TComment<cr>
vnoremap <Leader>c :TComment<cr>

" Testing
nnoremap <Leader>rt :Rake " run tests
nnoremap <Leader>rtt :.Rake " run this test

" Tags
nnoremap <Leader>]i :!ctags -R .<CR> " Index ctags from any project, including those outside Rails
nnoremap <Leader>v :vsp <CR>:exec("tag ".expand("<cword>"))<CR> " open tag definition in new vsplit window

" Clipboard manipulation
nnoremap <Leader>yfn :let @* = expand("%")<cr> " copy file path to clipboard, yank file name
"replace current word with contents of register
nnoremap <silent> cp "_cw<C-R>"<Esc>
nnoremap <Leader>sp :set paste<cr>
nnoremap <Leader>snp :set nopaste<cr>

" Window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-\> <C-W><bar>

" Searching
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw! " bind \ (backward slash) to grep shortcut
nnoremap <Leader>a :Ag<SPACE>
nnoremap <Leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR> " bind K to grep word under cursor

" Golang Mappings
nnoremap <Leader>gr :GoRun
nnoremap <Leader>gt :GoTest

