set nocompatible               " be iMproved
let mapleader=','
filetype off                   " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
  Plugin 'VundleVim/Vundle.vim'
  " Utility
  Plugin 'vim-airline/vim-airline'
  Plugin 'vim-airline/vim-airline-themes'
  Plugin 'junegunn/fzf'
  Plugin 'junegunn/fzf.vim'
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'
  Plugin 'scrooloose/nerdtree'
  Plugin 'vim-scripts/tComment'
  Plugin 'Raimondi/delimitMate'
  Plugin 'terryma/vim-multiple-cursors'
  Plugin 'janko-m/vim-test'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-fugitive'
  Plugin 'w0rp/ale' "linting and formatting
  " Themes
  Plugin 'chriskempson/base16-vim'
  " All the languages!
  Plugin 'sheerun/vim-polyglot'
  " Plugin 'elixir-editors/vim-elixir'
  " Plugin 'peitalin/vim-jsx-typescript' " not in vim-polyglot 2019-01-16
  Plugin 'junegunn/goyo.vim'
call vundle#end()
set rtp+=/usr/local/go/misc/vim
set rtp+=/usr/local/opt/fzf
filetype plugin indent on
syntax on "Enables syntax highlighting


""""""""""""""""""""""
"""""" SETTINGS """"""
""""""""""""""""""""""
" Tabs
set tabstop=2 "Sets indents to 2 spaces
set shiftwidth=2 "Sets indents to 2 spaces
set shiftround
set expandtab "Uses spaces instead of tabs
set list listchars=tab:»·,trail:· " Display extra whitespace

" Other settings
set number "Shows lines numbers
set cursorline "Highlights current line under cursor
set ruler
set laststatus=2 "Shows the status bar even if there is only one buffer open
" set timeoutlen=1000
" set ttimeoutlen=100
set backspace=2 "Allows backspacing over everything in insert mode
" set lazyredraw "Makes scrolling lag not as bad
" set ttyfast "Force terminal to assume a fast connection
set t_Co=256
set splitbelow
set splitright
" set re=1 " Use old regex engine, ruby syntax regexes were lagging
set hlsearch
set mouse=a " Enable using the mouse
set undodir=~/.vim/undo
set backupcopy=yes
set wrap
map j gj
map k gk
set iskeyword+=-
set foldmethod=syntax
set foldlevelstart=20
set termguicolors " neovim color compatibility
set spelllang=en
set scrolloff=10

let delimitMate_expand_cr = 1

" Elm-vim stuff
" let g:elm_setup_keybindings = 0
" let g:elm_format_autosave = 1

" Highlight JSX in JS files
let g:jsx_ext_required = 0

" vim-airline
let g:airline_powerline_fonts = 1

""""""""""""""""""""""
""" CUSTOMIZATIONS """
""""""""""""""""""""""
" --- Old CtrlP config ---
" Plugin 'ctrlpvim/ctrlp.vim'
" Use ripgrep for searching and CtrlP
" if executable('rg')
"  set grepprg=rg\ --color=never
"  let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
"  let g:ctrlp_use_caching = 0
"  let g:ctrlp_show_hidden = 1
" endif
" nnoremap <Bslash> :CtrlP<cr>
" nnoremap <Leader>b :CtrlPBuffer<cr>
" nnoremap <Leader>a :Ag<SPACE>

" Use ripgrep for searching and fzf
if executable('rg')
  set grepprg=rg\ --vimgrep\ --ignore-case\ --hidden\ --no-column
  " command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob --color=never "!.git/*" '.shellescape(<q-args>), 1, <bang>0)
endif
" Define ripgrep :Find search command
command! -nargs=+ Find execute 'silent grep! <args>' | copen

" Tab completion
" will insert tab at beginning of line, will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Deletes all hidden buffers (ones not currently visible)
function DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Detect *.md files as Markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Theme related parameters
set background=dark
" colorscheme base16-solarized-light
" colorscheme base16-ocean
" colorscheme base16-oceanicnext
" colorscheme base16-material
" colorscheme base16-onedark
" colorscheme base16-railscasts
colorscheme base16-tomorrow-night-eighties

" Ale linters and fixers

let g:ale_linters = {
\   'elixir': ['credo', 'mix'],
\   'handlebars': ['ember-template-lint'],
\   'hbs': ['ember-template-lint'],
\   'html.handlebars': ['ember-template-lint'],
\   'markdown': ['prettier'],
\   'rust': ['rls'],
\   'scss': ['stylelint'],
\   'typescript': ['tsserver', 'tslint'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'css': ['stylelint'],
\   'elixir': ['mix_format'],
\   'handlebars': [],
\   'hbs': [],
\   'html.handlebars': [],
\   'javascript': ['prettier'],
\   'json': ['prettier'],
\   'markdown': ['prettier'],
\   'rust': ['rustfmt'],
\   'scss': ['stylelint'],
\   'typescript': ['tslint', 'prettier'],
\}
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1


""""""""""""""""""""""
"""""" MAPPINGS """"""
""""""""""""""""""""""
:inoremap jk <Esc>

" fzf
nnoremap <Bslash> :Files<cr>
" let g:fzf_preview_window = '' " disable file preview

" NERDTree
nnoremap <Leader>f :NERDTreeToggle<cr>
let g:NERDTreeWinSize=60

" Buffers
nnoremap <Leader>b :Buffers<cr>
nnoremap <Leader>db :call DeleteHiddenBuffers()<cr>

" Saving, etc
nnoremap <Leader>w :retab<bar>:w<cr> " changes tabs to spaces and save
nnoremap <Leader>wq :retab<bar>:wq<cr> " changes tabs to spaces, saves, and quits
nnoremap <Leader>q :q<cr>

" Commenting
nnoremap <Leader>c :TComment<cr>
vnoremap <Leader>c :TComment<cr>

" Testing
" nnoremap <Leader>rt :Rake " run tests
" nnoremap <Leader>rtt :.Rake " run this test
" run npm tests
" nnoremap <Leader>nt :!npm test
" Trying out janko-m/vim-test
let test#filename_modifier = ":p"
let test#strategy = "neovim"
nmap <silent> <leader>tt :TestNearest<CR> " Test This
nmap <silent> <leader>tf :TestFile<CR> " Test File
nmap <silent> <leader>ta :TestSuite<CR> " Test All
nmap <silent> <leader>tl :TestLast<CR> " Test Last

" Clipboard manipulation
" copy file path to clipboard, yank file name
nnoremap <Leader>yfn :let @* = expand("%")<cr>
"replace current word with contents of register
nnoremap <silent> cp "_cw<C-R>"<Esc>
nnoremap <Leader>sp :set paste<cr>
nnoremap <Leader>snp :set nopaste<cr>
nnoremap <Leader>snp :set nopaste<cr>
nnoremap Y y$

" Window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-\> <C-W><bar>

" Searching
nnoremap <Leader>a :Find<SPACE>
nnoremap <Leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR> " bind leader k to grep word under cursor

" Snippets
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<S-Tab>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"

" Elixir Mappings
nnoremap <Leader>mt :!mix test
nnoremap <Leader>mtt :!mix test %
nnoremap <Leader>er :!elixir %

" Ale
nnoremap <Leader>d :ALEDetail<cr>

" Goyo
function! s:goyo_enter()
  set linebreak
  set spell spelllang=en_us
endfunction

function! s:goyo_leave()
  set nolinebreak
  set nospell
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
